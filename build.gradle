/*
 * Copyright 2022 Virtualnation Pty Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
plugins {
    id 'mechanisms.java-library-conventions'
    id 'com.github.johnrengelman.shadow' version '7.1.2' apply false
    id 'biz.aQute.bnd.builder' version '6.3.1' apply false
    id "com.github.ben-manes.versions" version "0.42.0"
}
defaultTasks 'clean', 'build'

static def getBuildJavaVersion() {
    def buildJavaVersion = System.getenv('BUILD_JAVA_VERSION') ?: JavaVersion.current().getMajorVersion()
    if (buildJavaVersion.indexOf('.') > 0) {
        buildJavaVersion = buildJavaVersion.substring(0, buildJavaVersion.indexOf('.'))
    }
    if (buildJavaVersion.indexOf('-') > 0) {
        buildJavaVersion = buildJavaVersion.substring(0, buildJavaVersion.indexOf('-'))
    }
    Integer.parseInt(buildJavaVersion)
}
int buildJavaVersion = getBuildJavaVersion()

def toolchainLauncher = javaToolchains.launcherFor {
    languageVersion = JavaLanguageVersion.of(buildJavaVersion)
}

def toolchainCompiler = javaToolchains.compilerFor {
    languageVersion = JavaLanguageVersion.of(buildJavaVersion)
}

def toolchainJavadocTool = javaToolchains.javadocToolFor {
    languageVersion = JavaLanguageVersion.of(buildJavaVersion)
}

def byteBuddyVersion = '1.12.16'
def findbugsAnnotationsVersion = '3.0.1'
def checkstyleVersion = '9.3'
def hamcrestVersion = '2.2'
def mockitoVersion = '4.8.0'
def junitVersion = '5.8.2'
def guavaTestLib = '31.1-jre'
def junit4Version = '4.13.2'
def jmhVersion = '1.35'
def jcstressVersion = '0.15'

def mechanismsGroup = 'vn.mechanisms'
def mechanismsVersion = '0.1-SNAPSHOT'

def getConfigProperty(final String projectPropertyName, final String envVarName) {
    String value = project.findProperty(projectPropertyName)
    if (!value) {
        value = System.getenv(envVarName)
        if (!value) {
            return null
        }
    }

    value = value.trim()

    return value ? value : null
}
ext {
    isReleaseVersion = !mechanismsVersion.endsWith('-SNAPSHOT')

    ossrhReleasesRepoUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
    ossrhSnapshotsRepoUrl = 'https://oss.sonatype.org/content/repositories/snapshots/'
    ossrhUsername = getConfigProperty('ossrhUsername', 'OSSRH_USERNAME')
    ossrhPassword = getConfigProperty('ossrhPassword', 'OSSRH_PASSWORD')

    signingKey = getConfigProperty('signingKey', 'SIGNING_GPG_SECRET_KEY')         // NOTE: ASCII armored secret key
    signingPassword = getConfigProperty('signingPassword', 'SIGNING_GPG_PASSWORD') // NOTE: Plain text
}

def projectPom = {
    name = 'mechanisms'
    // optionally artifactId can be defined here
    description = 'Demonstrate mechanisms of different functions'
    url = 'https://github.com/phaynes/mechanisms'

    scm {
        connection = 'scm:git:https://github.com/phaynes/mechanisms.git'
        developerConnection = 'scm:git:https://github.com/phaynes/mechanisms.git'
        url = 'https://github.com/phaynes/mechanisms.git'
    }

    licenses {
        license {
            name = 'The Apache License, Version 2.0'
            url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
        }
    }

    developers {
        developer {
            id = 'phaynes'
            name = 'Philip Haynes'
            email = 'philip.haynes@me.com'
            url = 'https://github.com/phaynes'
        }

    }
}

allprojects {
    repositories {
        mavenCentral()
    }

    configurations.all {
        resolutionStrategy {
            failOnVersionConflict()

            force "junit:junit:${junit4Version}",
                  "net.bytebuddy:byte-buddy:${byteBuddyVersion}",
                  "net.bytebuddy:byte-buddy-agent:${byteBuddyVersion}"
        }
    }

    tasks.withType(JavaExec).configureEach {
        javaLauncher.set(toolchainLauncher)
    }
}

jar.enabled = false

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'checkstyle'

    group = mechanismsGroup
    version = mechanismsVersion

    checkstyle.toolVersion = "${checkstyleVersion}"

    tasks.withType(Sign) {
        onlyIf {
            isReleaseVersion && gradle.taskGraph.hasTask(tasks.publish)
        }
    }

    tasks.withType(Jar) {
        enabled = true
        includeEmptyDirs = false
    }

    tasks.withType(JavaCompile) {
        doFirst {
            mkdir 'build/resources/main' // Avoid Javac warning about non-existing directory
        }

        if (buildJavaVersion >= 9) {
            javaCompiler.set(toolchainCompiler)
        }
        else {
            options.fork = true
            def javaHome = toolchainCompiler.get().metadata.installationPath.asFile.toPath().toAbsolutePath()
            options.forkOptions.javaHome = javaHome.toFile()
        }

        options.compilerArgs.addAll(['-Xlint:all', '-Werror']) // Enable all warnings and treat them as errors
        options.compilerArgs.add('-XDignore.symbol.file') // Suppress warnings about using Unsafe
        options.encoding = 'UTF-8'
        options.deprecation = true
    }

    test {
        if (buildJavaVersion >= 9) {
            jvmArgs('--add-opens', 'java.base/sun.nio.ch=ALL-UNNAMED')
        }

        useJUnitPlatform()

        testLogging {
            for (def level : LogLevel.values())
            {
                def testLogging = get(level)
                testLogging.exceptionFormat = 'full'
                testLogging.events = ["FAILED", "STANDARD_OUT", "STANDARD_ERROR"]
            }
        }

        javaLauncher.set(toolchainLauncher)
    }

    javadoc {
        title = '<h1>Mechanisms</h1>'
        options.bottom = '<i>Copyright &#169; 2022 Virtualnation Pty Ltd. All Rights Reserved.</i>'
        options.encoding = 'UTF-8'
        options.docEncoding = 'UTF-8'
        options.charSet = 'UTF-8'
        if (buildJavaVersion >= 19) { // early access JavaDoc location is different
            options.links("https://download.java.net/java/early_access/jdk${buildJavaVersion}/docs/api/")
        }
        else if (buildJavaVersion >= 11) {
            options.links("https://docs.oracle.com/en/java/javase/${buildJavaVersion}/docs/api/")
        }
        else {
            options.links("https://docs.oracle.com/javase/${buildJavaVersion}/docs/api/")
        }

        if (buildJavaVersion >= 10) {
            options.addBooleanOption 'html5', true
        }

        javadocTool.set(toolchainJavadocTool)
    }
}
project(':mechanisms') {
    apply plugin: 'maven-publish'
    apply plugin: 'signing'
    apply plugin: 'biz.aQute.bnd.builder'

    dependencies {
        implementation 'org.agrona:agrona:1.17.1'
        testImplementation files('build/classes/java/generated')
        testImplementation "org.hamcrest:hamcrest:${hamcrestVersion}"
        testImplementation "org.junit.jupiter:junit-jupiter-params:${junitVersion}"
        testImplementation "org.mockito:mockito-core:${mockitoVersion}"
        testImplementation "com.google.guava:guava-testlib:${guavaTestLib}"
        testImplementation "junit:junit:${junit4Version}" // Compatibility with JUnit 4
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
        testRuntimeOnly "org.junit.vintage:junit-vintage-engine:${junitVersion}"
    }

    def generatedDir = file("${buildDir}/generated-src")
    sourceSets {
        generated {
            java.srcDir generatedDir
            compileClasspath += sourceSets.main.runtimeClasspath
        }
    }

    task generatePrimitiveSpecialisations(type: JavaExec) {
        mainClass.set('mechanisms.generation.SpecialisationGenerator')
        classpath = sourceSets.main.runtimeClasspath
        outputs.dir generatedDir
    }

    compileGeneratedJava.dependsOn generatePrimitiveSpecialisations
    compileTestJava.dependsOn compileGeneratedJava
    javadoc.dependsOn generatePrimitiveSpecialisations

    jar {
        from sourceSets.generated.output

        bnd """
            Automatic-Module-Name:  vn.mechanisms.core
            Bundle-Name:            vn.mechanisms.core
            Bundle-SymbolicName:    vn.mechanisms.core
            Implementation-Title:   Mechanisms
            Implementation-Vendor:  Virtualnation Pty Ltd
            Implementation-Version: ${mechanismsVersion}
            -exportcontents: vn.mechanisms, vn.mechanisms.*
            # Suppress headers that reduce reproducibility.
            -reproducible: true
            -noextraheaders: true
        """
    }

    task sourcesJar(type: Jar, dependsOn: generatePrimitiveSpecialisations) {
        archiveClassifier.set('sources')
        from sourceSets.main.allSource
        from sourceSets.generated.allSource
    }

    javadoc {
        source += sourceSets.generated.allJava
    }

    java {
        withSourcesJar()
        withJavadocJar()
    }

    publishing {
        publications {
            mechanisms(MavenPublication) {
                from components.java
                pom(projectPom)
            }
        }

        repositories {
            maven {
                name = 'MavenCentral'
                url(!isReleaseVersion ? ossrhSnapshotsRepoUrl : ossrhReleasesRepoUrl)
                credentials {
                    username = ossrhUsername
                    password = ossrhPassword
                }
            }
        }
    }

    signing {
        if (null != signingKey) {
            useInMemoryPgpKeys(signingKey, signingPassword)
        }
        /* sign publishing.publications.mechanisms */
    }
}

task testReport(type: TestReport) {
    destinationDirectory = file("$buildDir/reports/allTests")
    // Include the results from the `test` task in all subprojects
    testResults.setFrom(subprojects*.test)
}

def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r|-jre)?$/
    return !stableKeyword && !(version ==~ regex)
}

tasks.named("dependencyUpdates").configure {
    // Reject all non stable versions
    rejectVersionIf {
        isNonStable(it.candidate.version)
    }
}

task copyTestLogs(type: Copy) {
    from '.'
    include '**/*.log'
    include '**/jcstress-results-*.gz'
    include 'LICENSE'
    exclude 'build'
    into 'build/test_logs'

    includeEmptyDirs = false
}

wrapper {
    gradleVersion = '7.5.1'
    distributionType = 'ALL'
}

class NullOutputStream extends OutputStream
{
    void write(final int bytes) throws IOException
    {
    }

    void write(final byte[] bytes) throws IOException
    {
    }

    void write(final byte[] bytes, final int offset, final int length) throws IOException
    {
    }
}